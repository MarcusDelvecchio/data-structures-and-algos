
- From graph view, a tree can also be defined as a directed acyclic graph which has N nodes and N-1 edges
- linked list is a tree
- important constarint of a tree is no two references to the same node
- trees cannot contain cycles

Binary trees
A Binary Tree is one of the most typical tree structure. As the name suggests, a binary tree is a tree data structure in which each node has at most two 
children, which are referred to as the left child and the right child.

types of traversal orders for trees:
- Pre-order Traversal
- In-order Traversal
- Post-order Traversal
- Level order Traversal

(implementation difference)
Recursive or Iterative

    1. Pre-order traversal:
    - Pre-order traversal is to visit the root first. Then traverse the left subtree. Finally, traverse the right subtree.

            pre-order logic goes:
                "visit" this node, visit left, visit right

    2. In-order traversal:
    - In-order traversal is to traverse the left subtree first. Then visit the root. Finally, traverse the right subtree.

            in-order logic goes:
                "visit" left, visit this node, visit right
    
    **Typically, for binary search tree, we can retrieve all the data in sorted order using in-order traversal.**
        - this is because in BST, left is less than current, right is more. So for correct order we use in-order

    
    3. Post-order Traversal:
    - Post-order traversal is to traverse the left subtree first. Then traverse the right subtree. Finally, visit the root.

            post-order logic goes:
                "visit" this node, visit right, then visit this node

    **Typically when you delete nodes in a tree, deletion process will be in post-order. That is to say, when 
    you delete a node, you will delete its left child and its right child before you delete the node itself.**



            25
           /   \
          /     \
         15      50
        /  \    /  \
       /    \  /    \
      10   22 35    70

    in-order:
        10, 15, 22, 25, 35, 50, 70
                     ^
        - notice that left of root is in-order traversal or left subtree and right of root is in-order traversal of right subtree
        - note that the in-order traversal of two different trees can be the same though they are structurally different.
    
    pre-order:
        [todo]




===== Level order Traversal ====
Level-order traversal is to traverse the tree level by level. Breadth-First Search is an algorithm to traverse or search in data structures like a tree or a 
graph. The algorithm starts with a root node and visit the node itself first. Then traverse its neighbors, traverse its second level neighbors, traverse its 
third level neighbors, so on and so forth.
**Typically, we use a queue to help us to do BFS. If you are not so familiar with the queue data structure**

implementation in python to *return an array of arrays for each of the levels**

ex 
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

from collections import deque
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

def levelOrder(self, root):
    if not root:
        return []
    
    # create queue for current level and add root
    level = deque()
    level.append(root)
    ans = []
    
    # loop through all the items in the level, append them to res and 
    while len(level):
        ans.append(node.val for node in level)
        
        # create temp so python doesn't wine about editing iterator inside loop
        temp = deque()
        for node in level:
            if node.left:
                temp.append(node.left)
            if node.right:
                temp.append(node.right)
        level = temp
    return ans



    sudocode implementation:

    def levelOrder(root):
        if not root: return []

        res = []
        level = Queue()
        level.append(root)

        while len(level):
            
            # add all items from level into res

            # create new_level = Queue()
            # for items in level
                # add left to new_level
                # add right to new_level
            level = new_level
        
        return res





==== Solving Tree Problems with Bottom-up vs Top-down ===========
Typically, we can solve a tree problem recursively using a top-down approach or using a bottom-up approach.

"Top-down" means that in each recursive call, we will visit the node first to come up with some values, and pass these values to its children
when calling the function recursively.
    - top down is a kind of pre-order traversal

"Bottom-up" is another recursive solution. In each recursive call, we will firstly call the function recursively for all the children nodes and 
then come up with the answer according to the returned values and the value of the current node itself
    - This process can be regarded as a kind of postorder traversal

using bottom-up vs top-down:
    When you meet a tree problem, ask yourself two questions: Can you determine some parameters to help the node know its answer? Can you use these parameters
     and the value of the node itself to determine what should be the parameters passed to its children? If the answers are both yes, try to solve this 
     problem using a "top-down" recursive solution.

    Or, you can think of the problem in this way: for a node in a tree, if you know the answer of its children, can you calculate the answer of that node? If 
    the answer is yes, solving the problem recursively using a bottom up approach might be a good idea.

