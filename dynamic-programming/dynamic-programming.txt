https://leetcode.com/problems/target-sum/solutions/455024/dp-is-easy-5-steps-to-think-through-dp-questions/
good read^


types of dynamic programming problems:
1. 0/1 Knapsack
2. Unbounded Knapsack
3. Shortest Path (eg: Unique Paths I/II)
4. Fibonacci Sequence (eg: House Thief, Jump Game)
    (^aka 'linear DB' ?)
5. Longest Common Substring/Subsequeunce
    ^ also can be solved with sliding window
    ^ this is a 2D DP problem

notes on problem type classifications
- snakes and ladders NOTE you CANNOT use tabulation and cannot use DFS
    - so it is therefor NOT a DP problem, just a BFS problem it seems (top down BFS)
    - this is a SHORTEST PATH problem (did I confuse it with a 0/1 napsack problem?)
    - if it was only ladders, it would be (or could be solved as?) a 0/1 knapsack right?

DP has TWO main approaches:
    - bottom-up (tabulation, iterative)
    - top-down (recursive, memoization)

    - note we can also have 

"DP is an approach to solving complex problems which involves breaking the problem down into simpler problems 
    and solving those problems first"
    - This approach can be particularly effective when solving problems that have overlapping sub-problems.

typically in a dynamic programming problem, we store the computed subproblem results in an array as we build up to
    solve the full solution. And depending on the variables involved, this array could have various dimensions causing us to need
    to store various computations for each subproblem as the variables change. This is the multi-dimension aspect of DP.

    "what is the 1D DP??" -> "it means that you just use a 1 Dimensional that is a simple array to store the computed results. 2D would use values from two or possibly more elements from the matrix (2d array)"
    "if you know dynamic programming then you must know what a state is. When your state can be represented by just one identifier (one - Dimension) you use a linear data structure to hold it.If your state is uniquely represented using two variables (two dimensions) then you need a 2D array or matrix to store the computed result. Similarly for 3d dp."
    "the number of dimensions encoding the subproblems"

_______________
Dynamic programming has 3 steps:
———————————––––
1. Break the problem into easier/recursive subproblems.
2. As you solve the subproblems, remember each one’s solution.
3. If you encounter a subproblem that’s identical to one you’ve already solved, use the previous solution instead of recalculating it.
———————————––––––

Lol there is only 11 DP easy problems on LC the rest are med/hard

this one makes less sense to me but:
"Dynamic programming is designed such that “the optimal solution to the overall problem depends upon the optimal 
    solution to its subproblems.”

"The key to dynamic programming is to identify the subproblem that gives the main problem
    “optimal substructure property.”

"Optimal Substructure" Property:
"Optimal Substructure: If a problem can be solved by using the solutions of the sub problems then we say that problem has a Optimal Substructure Property."
"A formal way of saying that the key is to identify the subproblem that will allow us us to solve the main problem by just solving the subproblem repeatedly"

Recusively solving and memoizing sub problems as a means of solving the overall solution.
A big part of it is finding the correct sub problems to solve.

Bottom-Up Approach: Compute Subproblems First and 
- Suppose we need to solve the problem for N, We start solving the problem with the smallest possible inputs and store it for future. Now as you calculate for the bigger values use the stored solutions (solution for smaller problems).  
- some people prefer this approach because it (can often?) be done without function calls

Top-Down Approach: Break the problem into sub-problems and solve them as needed and store the solution for future

various DP problem patterns:
Minimum (Maximum) Path to Reach a Target
    https://leetcode.com/list/55ac4kuc/
Distinct Ways
Merging Intervals
DP on Strings
Decision Making

on the *dimensions* of a dynamic programming problem
"a variety of dynamic programming that is well-suited to problems that have multiple dimensions or variables"


resources:
https://youtu.be/vYquumk4nWw?si=117daxY32dyRuFwZ
https://www.youtube.com/watch?v=aPQY__2H3tE
NeetCode on classes/types of DP problems: https://www.youtube.com/watch?v=mBNrRy2_hVs
coin change / dp guide: https://betterprogramming.pub/learn-dynamic-programming-the-coin-change-problem-22a104478f50
dp guide on LC: https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns
on dimensions: https://iamsuman.com/multi-dimensional-dynamic-programming-an-introduction#
approaching DP problems: tabulation vs recursion, https://leetcode.com/problems/house-robber/solutions/156523/From-good-to-great.-How-to-approach-most-of-DP-problems./comments/209401/
_______________
Dynamic Programming Tabulation (versus recursion + memoization)

Tabulation is an approach where you solve a dynamic programming problem by first filling up a table, 
and then compute the solution to the original problem based on the results in this table.

How to know whether to use recursion + memoization or iteration + tabulation

tabulation allows improvements on space complexity:
bottom up allows for optimization tricks to reduce the space used if you only need the last X states to compute the current one.

_______________
Tabulation

Tabulation is a bottom-up method for solving DP problems.
It starts from the base cases and finds the optimal solutions to the problems whose immediate sub-problems are the base cases.

"
Memoization is faster when you are *able to skip a lot of previous suboptimal solutions* since going top down means
you can choose only the subproblems you need to solve.

tabulation is faster when you have to compute *most or all* of the suboptimal solutions since going bottom up means you're 
already solving almost all or all the subproblems that could possibly exist, and doing for loops is much faster than doing 
recursion which initializes a crap load of stack frames and other call stack overhead.
"

________________________________
DP versus memoization

A top-down recuvsive solution *with memoization* is also considered "dynamic programming", but this
type of solution is different than the *iterative* dp problems that often look very complex

also note memoization can only be done when performing a top-down approach, as solutions to the subproblems
are memoized, as to prevent repeated calculations. This is not needed for bottom-up approaches because in these solutions
we build off of the lower-level solutions upwards, not needing to traverse back down again.

On DP versus memoization:
"
The big thing to get out of this thread is that different people use different definitions of dynamic programming.
It is true that, originally, dynamic programming referred only to the bottom-up approach, as in the comment by u/bhrgunatha. And some people continue to use the term only in that way.
But others allow dynamic programming to refer to both the bottom-up and top-down approaches, as in the comment by u/krubslaw. This is where I'm coming from. In my algorithms class, I refer to "bottom-up dynamic programming" and "top-down dynamic programming".
Therefore, if one allows dynamic programming to refer to the top-down approach, then, as u/krubslaw said, memoization is a technique that can be used to do top-down dynamic programming. But if one allows dynamic progamming to refer only to the traditional 
bottom-up approach, then memoization is something separate. Bottom-up dynamic programming doesn't call functions more than once with the same parameter values, so memoization is not useful in that context.
"

random bits:
"DP problems are mostly optimization problems. They generally ask for the largest, smallest, shortest, longest, maximum, minimum something in an array or set. So look for these keywords to identify a DP problem.

on Memoization vs Tabulation vs Non-DP Questions: https://www.reddit.com/r/leetcode/comments/164tz2c/comment/jybjvj1/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button