Backtracking (and recursion)


from general backtracking explanation here: 
https://leetcode.com/problems/combinations/solutions/844096/backtracking-cheatsheet-simple-solution/
this is rude^^

"Backtracking is a general algorithm for finding all (or some) solutions to some computational problems which incrementally builds candidates
to the solution and abandons a candidate ("backtracks") as soon as it determines that the candidate cannot lead to a valid solution."
"It is due to this backtracking behaviour, the backtracking algorithms are often much faster than the brute-force search algorithm, since it eliminates many unnecessary exploration."

3 keys of backtracking:
- you make choices
- you constraints on those choices
- at the end you converge towards a goal

choice: decision space to choose from
constraints: your decisions are restricted somehow
goal: your goal is to od something

There is also a good explanation for backtracking for the subsets algorithm here:
https://leetcode.com/problems/subsets/solutions/360873/python-backtracking/
where the time complexity might be better than my 'subsets' problem solution and it more accurately models the backtracking solution model where the writer goes
1. choose 2. explore 3. unchoose (similar to the other 3 keys above)

related problems:
N-Queens

resources:
https://www.youtube.com/watch?v=Zq4upTEaQyM