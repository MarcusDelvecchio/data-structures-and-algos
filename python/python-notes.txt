Python notes

simple things:
- empty lists are falsy in python
- the *amortized* time complexity for appending to an array is O(1).
    "It runs in constant time as long as an re-allocation isn't required (when python list reaches max size). In the worst case, (when this does happen) it's O(n), but that worst case isn't frequent."
    - so it is amortized to being O(1)
    - see here for explanations https://www.reddit.com/r/learnpython/comments/yeahqq/what_is_pythons_listappend_method_worst_time/

python function parameters are pass by assignment (similar to pass by reference)
	- when you pass a variable into a function and change it's value, the inital variable will be changed (if it was pass-by-value, it would not, as only the variables *value* would be copied into the function)
	- however pass by assignment is different than pass by reference
    
    But we must understand python objects first so see below


In Python, everything is an object (like JS) and there are three primary characteristics (properties) of every object:
	- its id
	- it's  type
	- it's content'

	ex.

	>>> id(obj)
	2698212637504       # the identity of `obj`
	>>> type(obj)
	<class 'list'>      # the type of `obj`
	>>> obj
	[1, 2, 3]           # the contents of `obj`


Immutability: (immutability == "unable to be changed)
- The (im)mutability of an object depends on its type.
    - In other words, (im)mutability is a characteristic of types, not of specific objects
- A type is mutable if you can change the contents of its objects without changing its identity and its type.

some types are immutable but don't seem like it:
    - strings in python - although you can re-assign the value of a string variable, you are simply creating an entirely new string object rather than adjusting the initial one

"A very good indicator that an object is immutable is when all its methods return something."
- this is because it needs to return the updated version it seems like.
- like doing List.append(0) returns nothing because it is assumed the original List will be updated (and you have access to it)
    but doing "string".append("something") returns "stringsomething" becuase since strings are immutable, the new string must be returned from the method

"Another great hint at the fact that strings are immutable is that you cannot assign to its indices"
- trying to change a string char by index returns "'str' object does not support item assignment"

Variables and Objects - Variable names are labels, and you can add more than one label to the object
- the is() function compares to objects (or variables pointing to objects) and returns true if they point to the same object (same id property)
- to access the id property of a Python object is id(obj) 

Back to the "Pass-by-assignment" stuff
- when we call a function, each of the parameters of the function is assigned to the object they were passed in. In essence, each parameter now becomes a new nickname to the objects that were given in.

so when immutable objects/variables are passed into a function, their values are basically copied and passed in by value
but if mutable objects/variables are passed into a function, their values are basically passed by reference

examples:

    def bar(foo):
        foo = "bar"
        return

    string = "string"   
    bar(string)
    print(string) # prints "string" - since string is immutable the object passed in is not changed

    but with mutable objects:

    def bar(foo):
        foo.append("meat")
        return

    val = []
    bar(val)
    print(val) # prints "["meat"]" - since List is mutable it is passed in by reference



=============
= On Python for-loop references - Python does not like you being able to modify the items being iterated over, so changing them based on the
    loop value will not actually modify the item itself

# if 'head' is a Linked List say [1,2,3,4]
lists = [head]

# and we loop through the lists in list (even though there is only one) and change it
for list in lists:
    list = list.next

# the actual original list does not get changed
for list in lists:
    print(list.data)



======[ Python Zip Function ]=======
- The zip() function takes iterables (can be zero or more), aggregates them in a tuple, and returns it.
- the zip function is used for "parallel iteration"
"The zip function in Python combines elements from multiple iterables by grouping them based on their
respective positions (index), effectively transposing rows into columns when used with the * operator, 
as seen in zip(*board)."0

Example.py

    languages = ['Java', 'Python', 'JavaScript']
    versions = [14, 3, 6]

    result = zip(languages, versions)
    print(list(result))

    # Output: [('Java', 14), ('Python', 3), ('JavaScript', 6)]

=====[ Python Iterable Unpacking with * Opeator ]====
"Allows you to specify a “catch-all” name which will be assigned a list of all items not assigned to a “regular” name."

a, *b, c = range(5)
>>> a
0
>>> c
4
>>> b
[1, 2, 3]

similar to javascript spread

"Many algorithms require splitting a sequence in a “first, rest” pair. With the new syntax":
first, rest = seq[0], seq[1:]
"is replaced by the cleaner and probably more efficient:"
first, *rest = seq

another examples
s=[*'abcde'] // s = [a,b,c,d,e]
in the above case, the * operator 'unpacks' the entire array and save it to s

resources:
https://peps.python.org/pep-3132/

========[ Python List Comprehension ]=====

ex. 
"Allows conditional construction of list literals using for and if clauses. 
They would nest in the same way for loops and if statements nest now."
sudoku_box_top_left = [board[x][y] for x in range(0, 3) for y in range(0, 3)]

=====[ Python variable swapping ]=====
In Python you can swap variables by doing the following (withotu creating a temp variable):

a, b = 1,2
a,b = b,a
print(a,b) # 2,1

=====[ On Python variables being editable by loops ]=====
a = 0

for a in range(10, 20):
    print("test")
    
print(a) // 19


=======[ Python Dicts / { } ]=====

"Why dict.get(key) instead of dict[key]?":
    
    It allows you to provide a default value if the key is missing:
    dictionary.get("bogus", default_value)
    whereas
    dictionary["bogus"] would raise a KeyError.
    
    *and if default default value is omitted, it will return None*

======[ Python Counter Class ]=======

- replaces dictionaries / dictionary alternative
"from collections import Counter"

A Counter is a dict that has {item: count} key-value [airs, where the 'count' value represents the count or frequency of the key
ex.

x = Counter("geeksforgeeks")
 
# printing the elements of counter object
for i in x.elements():
    print ( i, end = " ")

# prints "g g e e e e k k s s f o r "

"It's a dictionary that stores objects as keys and counts as values. To count with Counter , you typically 
provide a sequence or iterable of hashable objects as an argument to the class's constructor."

see here:
https://stackoverflow.com/questions/19883015/python-collections-counter-vs-defaultdictint


========[ Python Floor "//" Operator (aka integer division) ]=======
-we can perform floor division (also sometimes known as integer division) using the // operator. This operator will divide the first argument
by the second and round the result down to the nearest whole number.

- I saw a leetcode solution (here https://leetcode.com/problems/recover-the-original-array/discuss/1647452/Python-Short-solution-explained)
where the guy does something + k//2 EVEN THOUGH he knows k is even anyways
but the reason he did this is to cast the result to an int regardless

- so this "//" operator can also be used to perform division and ensure the result is an integer as well


========[ Python deque (pronouncd "deck") data structure ]========
*is a double-ended queue ("de"-"que" like "deck") data structure*
see https://docs.python.org/3/library/collections.html#deque-objects

from collections import deque
my_queue = deque([1,2,3]) # creates deque with initial values of given list (not my_deque = deque(10) throws error - inital value must be iterable)

the my_queue variable is truthy while there are items in the queue, so I can do:

while my_queue:
    # do something

I can add motify the deque with:
    my_queue.append(1)
    my_queue.pop()

we can also get the length with len(my_queue)


=====
notes

use float("inf") to represent an infinitely large number!!!

the following doesn't run the for loop but doesn't throw an error

for i in range(100, 50):
    print("here")

and this doesn't run either

for i in range(1,1):
    print("here")

note also that loop variable exists outside of the scope of the loop:
for j in range(1, 10):
    print("here")
print(j) # prints 9


this doesn't work in python. It prints 10 times
for i in range(10):
    if i == 2:
        i = 10
    print('here')

to initalize a 2D list in python do
dp = [[0]*10 for _ in range(20)]
^ creates list 20 rows each having 10 columns

DO NOT DO
dp = [[0]*10]*20
this will create a 2D list but all of the rows will share the same reference
so if you change a value in one row it will change the same value in every row

gotchas / notes
- python lists are not hashable you must convert to tuple
- python sets do not preserve insertion order!
- python sorts ascending by default
- python sorts tuples/lists by first item by default (and same w/heaps)
- tuple object does not support item assignment —— they are immutable, you must use a list instead
- heapq is minheap by default, careful with flipped values when using inverted vals for max heap
- to initialize a set with a single string value you must do set(["()"]) NOT set("()") - latter initializes set to {"(", ")"}

conversions
converting python counter / dict of key-value pairs to a list?

    list(dic.items())

methods
converting string to upper / lower
    s.upper()
    s.lower()

checking if a string is alphanumeric
    s.isalnum()

sorting based on a object property or certain key
    s.sort(key=lambda x: x.prop)

reversing a string
    s[::-1]

